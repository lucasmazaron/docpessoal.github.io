{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Bem Vindo ao Meu Docs","title":"Home"},{"location":"#bem-vindo-ao-meu-docs","text":"","title":"Bem Vindo ao Meu Docs"},{"location":"sobre/","text":"Documenta\u00e7\u00e3o feita por Lucas Mazaron.","title":"Sobre"},{"location":"utils/","text":"Utils Links Admin LTE Materials MKDocs Material docs PostgreSQL DO $$ DECLARE r1 record ; BEGIN IF NOT EXISTS ( SELECT ...) THEN CREATE TRIGGER ... END IF ; FOR r1 IN ( SELECT ...) LOOP INSERT INTO ... END LOOP ; BEGIN CREATE INDEX tabela_idx_campo ON public . tabela USING btree ( campo ); EXCEPTION -- Para descobrir o tipo da exce\u00e7\u00e3o com base no valor da vari\u00e9vel \"SQLSTATE\" use o link: -- https://www.postgresql.org/docs/devel/static/errcodes-appendix.html WHEN duplicate_table THEN RAISE NOTICE '%' , SQLERRM ; WHEN others THEN RAISE EXCEPTION '% %' , SQLERRM , SQLSTATE ; END ; BEGIN ALTER TABLE < table_name > ADD COLUMN < column_name > < column_type > ; EXCEPTION WHEN duplicate_column THEN RAISE NOTICE 'column <column_name> already exists in <table_name>.' ; END ; END ; $$ ; CREATE TABLE IF NOT EXISTS myschema . mytable ( i integer );","title":"Utils"},{"location":"utils/#utils","text":"Links Admin LTE Materials MKDocs Material docs","title":"Utils"},{"location":"utils/#postgresql","text":"DO $$ DECLARE r1 record ; BEGIN IF NOT EXISTS ( SELECT ...) THEN CREATE TRIGGER ... END IF ; FOR r1 IN ( SELECT ...) LOOP INSERT INTO ... END LOOP ; BEGIN CREATE INDEX tabela_idx_campo ON public . tabela USING btree ( campo ); EXCEPTION -- Para descobrir o tipo da exce\u00e7\u00e3o com base no valor da vari\u00e9vel \"SQLSTATE\" use o link: -- https://www.postgresql.org/docs/devel/static/errcodes-appendix.html WHEN duplicate_table THEN RAISE NOTICE '%' , SQLERRM ; WHEN others THEN RAISE EXCEPTION '% %' , SQLERRM , SQLSTATE ; END ; BEGIN ALTER TABLE < table_name > ADD COLUMN < column_name > < column_type > ; EXCEPTION WHEN duplicate_column THEN RAISE NOTICE 'column <column_name> already exists in <table_name>.' ; END ; END ; $$ ; CREATE TABLE IF NOT EXISTS myschema . mytable ( i integer );","title":"PostgreSQL"},{"location":"angular/components/","text":"Componentes O que s\u00e3o? Pequenas partes dependentes reus\u00e1veis. Elementos personalizados, dispostos em estrutura de arvore , onde na ra\u00edz h\u00e1 sempre um component parent seguido dos seus filhos. S\u00e3o: Classes com um determinado ciclo de vida; Possuem: Template para determinar a apar\u00eancia; Selector (tag) para ser usado por outras partes da aplica\u00e7\u00e3o. Decorator @Component @Component ({ selector : 'prefix-namecomponent' , templateUrl : './myfirst.component.html' // pode ser arquivo externo ou direto usando o comando template: de vez de templateUrl: }) Generate Component Para gerar novo component na aplica\u00e7\u00e3o: ng generate component name -- spec = false // ou ng g c name -- spec = false Aten\u00e7\u00e3o --spec= determina se ir\u00e1 gerar ou n\u00e3o arquivos de testes Property Binding Para que serve? Linkar valor de uma propriedade de um elemento a uma express\u00e3o angular. A atualiza\u00e7\u00e3o \u00e9 sempre em um sentido. ONE-WAY BINDING - COMPONENT => TEMPLATE Sintaxe: // No componente user = { name : 'Luke Skywalker' } <!-- no template do componente --> < input type = \"text\" [ value ]=\" user . name \" > DOM (Document Object Model) - O que s\u00e3o propriedades do DOM? Propriedades identicas aos atributos HTML. Por\u00e9m possui propriedades extras. //in component user = { name : 'Luke Skywalker' , isJedi : true } <!-- in template --> < input type = \"text\" [ value ]=\" user . name \" > < div [ hidden ]=\"! user . isJedi \" > location of the jedi temple </ dib > Passando dados para os componentes Usando Decorator @Input As propriedades dos componentes s\u00e3o publicas por\u00e9m, parar passar dados, devemos indicar ao Angular qual deles podem receber dados dos component parent atrav\u00e9s de property binding . Primeira forma: import { Component , Input } from '@angular/core' @Component ({ selector : 'mt-header' , template : '<h1>{{title}}</h1>' }) // Por padr\u00e3o, nome do atributo exposto export class HeaderComponent { @input () title : string } //Expor com outro nome export class HeaderComponent { @input ( 'value' ) title : string //@input('nome a ser exposto') } <!-- usando o header --> < mt-header title = \"Minha APP\" ></ mt-header > <!-- utilizando com template Interpolation --> < mt-header title = \"{{isJedi ? 'Jedi' : 'Sith'}}\" ></ mt-header > <!--Property Binding --> < mt-header [ title ]=\" isJedi ? ' Jedi ' : ' Sith '\" ></ mt-header > <!-- usando o nome definido em @Input --> < mt-header value = \"Minha APP\" ></ mt-header > Sempre que for passar um valor que n\u00e3o \u00e9 String, utilizar property binding Eventos de Um Componente Sem diretivas NG-* . Eventos possuem uma sintaxe unica, utilizando parenteses \"()\". Ex: Evento (click)=\"\" clickable.component.ts: import { Component } from '@angular/core' @Component ({ selector : 'mt-clickable' , templateUrl : './clickable.component.html' }) export class ClickableComponent { clicked () : void { console . log ( 'Button clicked' ) } } clickable.component.html: < button ( click )=\" clicked ()\" > Click! </ button > Voc\u00ea pode tamb\u00e9m pode ter uma refer\u00eancia ao evento. clickable.component.ts: import { Component } from '@angular/core' @Component ({ selector : 'mt-clickable' , templateUrl : './clickable.component.html' }) export class ClickableComponent { clicked () : void { console . log ( `Button clicked: ${ event } ` ) //Here } } clickable.component.html: < button ( click )=\" clicked ($ event )\" > Click me! </ button > Evento (keydown.key)=\"\" O Evento keydown , permite voc\u00ea passar a tecla desejada. Ex: No template < input ( keydown . space )=\" KeyDown ($ event )\" > No Componente KeyDown ( event ) : void { console . log ( `Key down: ${ $event } ` ) } Evento personalizado Para emitir um evento personalizado, utilizamos a classe EVENTEMITTER . clickable.component.ts: import { Component , Output , EventEmitter } from '@angular/core' //Here @Component ({ selector : 'mt-clickable' , templateUrl : './clickable.component.html' }) export class ClickableComponent { // Output \u00e9 analogo a input... // Ao inv\u00e9s de receber valores ele emite eventos. @Output () myEvent = new EventEmitter () //Here clicked () : void { this . myEvent . emit () //Here } } No template que usa o componente: < mt-clickable ( myEvent )=\" willBeCalled ()\" ></ mt-clickable > willBeCalled () : void { console . log ( 'Event from clickable' ) }","title":"Componentes"},{"location":"angular/components/#componentes","text":"O que s\u00e3o? Pequenas partes dependentes reus\u00e1veis. Elementos personalizados, dispostos em estrutura de arvore , onde na ra\u00edz h\u00e1 sempre um component parent seguido dos seus filhos. S\u00e3o: Classes com um determinado ciclo de vida; Possuem: Template para determinar a apar\u00eancia; Selector (tag) para ser usado por outras partes da aplica\u00e7\u00e3o.","title":"Componentes"},{"location":"angular/components/#decorator-component","text":"@Component ({ selector : 'prefix-namecomponent' , templateUrl : './myfirst.component.html' // pode ser arquivo externo ou direto usando o comando template: de vez de templateUrl: })","title":"Decorator @Component"},{"location":"angular/components/#generate-component","text":"Para gerar novo component na aplica\u00e7\u00e3o: ng generate component name -- spec = false // ou ng g c name -- spec = false Aten\u00e7\u00e3o --spec= determina se ir\u00e1 gerar ou n\u00e3o arquivos de testes","title":"Generate Component"},{"location":"angular/components/#property-binding","text":"Para que serve? Linkar valor de uma propriedade de um elemento a uma express\u00e3o angular. A atualiza\u00e7\u00e3o \u00e9 sempre em um sentido. ONE-WAY BINDING - COMPONENT => TEMPLATE Sintaxe: // No componente user = { name : 'Luke Skywalker' } <!-- no template do componente --> < input type = \"text\" [ value ]=\" user . name \" >","title":"Property Binding"},{"location":"angular/components/#dom-document-object-model-o-que-sao-propriedades-do-dom","text":"Propriedades identicas aos atributos HTML. Por\u00e9m possui propriedades extras. //in component user = { name : 'Luke Skywalker' , isJedi : true } <!-- in template --> < input type = \"text\" [ value ]=\" user . name \" > < div [ hidden ]=\"! user . isJedi \" > location of the jedi temple </ dib >","title":"DOM (Document Object Model) - O que s\u00e3o propriedades do DOM?"},{"location":"angular/components/#passando-dados-para-os-componentes","text":"","title":"Passando dados para os componentes"},{"location":"angular/components/#usando-decorator-input","text":"As propriedades dos componentes s\u00e3o publicas por\u00e9m, parar passar dados, devemos indicar ao Angular qual deles podem receber dados dos component parent atrav\u00e9s de property binding . Primeira forma: import { Component , Input } from '@angular/core' @Component ({ selector : 'mt-header' , template : '<h1>{{title}}</h1>' }) // Por padr\u00e3o, nome do atributo exposto export class HeaderComponent { @input () title : string } //Expor com outro nome export class HeaderComponent { @input ( 'value' ) title : string //@input('nome a ser exposto') } <!-- usando o header --> < mt-header title = \"Minha APP\" ></ mt-header > <!-- utilizando com template Interpolation --> < mt-header title = \"{{isJedi ? 'Jedi' : 'Sith'}}\" ></ mt-header > <!--Property Binding --> < mt-header [ title ]=\" isJedi ? ' Jedi ' : ' Sith '\" ></ mt-header > <!-- usando o nome definido em @Input --> < mt-header value = \"Minha APP\" ></ mt-header > Sempre que for passar um valor que n\u00e3o \u00e9 String, utilizar property binding","title":"Usando Decorator @Input"},{"location":"angular/components/#eventos-de-um-componente","text":"Sem diretivas NG-* . Eventos possuem uma sintaxe unica, utilizando parenteses \"()\". Ex:","title":"Eventos de Um Componente"},{"location":"angular/components/#evento-click","text":"clickable.component.ts: import { Component } from '@angular/core' @Component ({ selector : 'mt-clickable' , templateUrl : './clickable.component.html' }) export class ClickableComponent { clicked () : void { console . log ( 'Button clicked' ) } } clickable.component.html: < button ( click )=\" clicked ()\" > Click! </ button >","title":"Evento (click)=\"\""},{"location":"angular/components/#voce-pode-tambem-pode-ter-uma-referencia-ao-evento","text":"clickable.component.ts: import { Component } from '@angular/core' @Component ({ selector : 'mt-clickable' , templateUrl : './clickable.component.html' }) export class ClickableComponent { clicked () : void { console . log ( `Button clicked: ${ event } ` ) //Here } } clickable.component.html: < button ( click )=\" clicked ($ event )\" > Click me! </ button >","title":"Voc\u00ea pode tamb\u00e9m pode ter uma refer\u00eancia ao evento."},{"location":"angular/components/#evento-keydownkey","text":"O Evento keydown , permite voc\u00ea passar a tecla desejada. Ex: No template < input ( keydown . space )=\" KeyDown ($ event )\" > No Componente KeyDown ( event ) : void { console . log ( `Key down: ${ $event } ` ) }","title":"Evento (keydown.key)=\"\""},{"location":"angular/components/#evento-personalizado","text":"Para emitir um evento personalizado, utilizamos a classe EVENTEMITTER . clickable.component.ts: import { Component , Output , EventEmitter } from '@angular/core' //Here @Component ({ selector : 'mt-clickable' , templateUrl : './clickable.component.html' }) export class ClickableComponent { // Output \u00e9 analogo a input... // Ao inv\u00e9s de receber valores ele emite eventos. @Output () myEvent = new EventEmitter () //Here clicked () : void { this . myEvent . emit () //Here } } No template que usa o componente: < mt-clickable ( myEvent )=\" willBeCalled ()\" ></ mt-clickable > willBeCalled () : void { console . log ( 'Event from clickable' ) }","title":"Evento personalizado"},{"location":"angular/depinjection/","text":"O que \u00e9 Inje\u00e7\u00e3o de Depend\u00eancia? Nota \u00c9 um padr\u00e3o de projeto onde, a aplica\u00e7\u00e3o deixa de instanciar seus objetos manualmente e come\u00e7a a depender do framework para obter os objetos que ela quer usar. O framework ger\u00eancia a instancia\u00e7\u00e3o de seus objetos e suas depend\u00eancias, e disponibiliza isso aos componentes da aplica\u00e7\u00e3o.","title":"Inje\u00e7\u00e3o de Depend\u00eancia"},{"location":"angular/depinjection/#o-que-e-injecao-de-dependencia","text":"Nota \u00c9 um padr\u00e3o de projeto onde, a aplica\u00e7\u00e3o deixa de instanciar seus objetos manualmente e come\u00e7a a depender do framework para obter os objetos que ela quer usar. O framework ger\u00eancia a instancia\u00e7\u00e3o de seus objetos e suas depend\u00eancias, e disponibiliza isso aos componentes da aplica\u00e7\u00e3o.","title":"O que \u00e9 Inje\u00e7\u00e3o de Depend\u00eancia?"},{"location":"angular/directives/","text":"Diretivas Para que servem? Serve para adicionar um comportamento a um elemento do DOM. N\u00e3o possui template. Existem tr\u00eas tipos de diretivas Componentes - Que s\u00e3o as mais comuns; Estruturais - Mudam o template/estrutura do DOM. Ex: ngFor - ngIf; Atributos - Associa um atributo a um elemento do DOM. Estruturais Como funcionam? Trabalham com padr\u00e3o de templates do HTML5. O * (asterisco) \u00e9 a forma abreviada da diretiva para que n\u00e3o precise digitar o elemento template. ngIf O Que faz? Renderiza ou n\u00e3o um conte\u00fado caso a condi\u00e7\u00e3o for verdadeira. < input type = \"text\" [ value ]=\" user . name \" > < div * ngIf = \"user.isJedi\" > location of the jedi template </ div > ngFor O Que faz? Repete o conte\u00fado de um elemento para cada item de uma cole\u00e7\u00e3o de objetos. < ul > < li * ngFor = \"let user of users\" > {{user.name}} </ li > </ ul > Dica Voc\u00ea pode declarar uma vari\u00e1vel para indice(Index come\u00e7a em 0): <ul> <li * ngFor= \"let user of users; let i=index\" > {{ i + 1 }} - {{ user.name }} </li> </ul> ngSwitch < div [ ngSwitch ]=\" profile \" > < p * ngSwitchCase = \"root\" > You can read & write </ p > < p * ngSwitchCase = \"user\" > You can read </ p > < p * ngSwitchDefault > go back, please! </ p > </ div >","title":"Diretivas"},{"location":"angular/directives/#diretivas","text":"Para que servem? Serve para adicionar um comportamento a um elemento do DOM. N\u00e3o possui template. Existem tr\u00eas tipos de diretivas Componentes - Que s\u00e3o as mais comuns; Estruturais - Mudam o template/estrutura do DOM. Ex: ngFor - ngIf; Atributos - Associa um atributo a um elemento do DOM.","title":"Diretivas"},{"location":"angular/directives/#estruturais","text":"Como funcionam? Trabalham com padr\u00e3o de templates do HTML5. O * (asterisco) \u00e9 a forma abreviada da diretiva para que n\u00e3o precise digitar o elemento template.","title":"Estruturais"},{"location":"angular/directives/#ngif","text":"O Que faz? Renderiza ou n\u00e3o um conte\u00fado caso a condi\u00e7\u00e3o for verdadeira. < input type = \"text\" [ value ]=\" user . name \" > < div * ngIf = \"user.isJedi\" > location of the jedi template </ div >","title":"ngIf"},{"location":"angular/directives/#ngfor","text":"O Que faz? Repete o conte\u00fado de um elemento para cada item de uma cole\u00e7\u00e3o de objetos. < ul > < li * ngFor = \"let user of users\" > {{user.name}} </ li > </ ul > Dica Voc\u00ea pode declarar uma vari\u00e1vel para indice(Index come\u00e7a em 0): <ul> <li * ngFor= \"let user of users; let i=index\" > {{ i + 1 }} - {{ user.name }} </li> </ul>","title":"ngFor"},{"location":"angular/directives/#ngswitch","text":"< div [ ngSwitch ]=\" profile \" > < p * ngSwitchCase = \"root\" > You can read & write </ p > < p * ngSwitchCase = \"user\" > You can read </ p > < p * ngSwitchDefault > go back, please! </ p > </ div >","title":"ngSwitch"},{"location":"angular/files/","text":"Geral dos Arquivos Angular CLI Packages.json Nota Arquivo de configura\u00e7\u00e3o da aplica\u00e7\u00e3o. Cont\u00e9m todas as depend\u00eancias WebPack Nota Biblioteca em java script respons\u00e1vel por criar os bundles da aplica\u00e7\u00e3o. polyfills - S\u00e9rie de scripts que voc\u00ea adiciona para aumentar compatibilidade com browsers antigos; main - Scripts da aplica\u00e7\u00e3o; styles - Stilos dentro da aplica\u00e7\u00e3o; vendor - Scripts de terceiros; inline - carregar webpack. src\\polyfills.ts Nota Incluir scripts para dar suporte a novas funcionalidades a browsers antigos app.module.ts @NgModule ({ declarations : [ MyFirstComponent ], //Todos os componentes da aplica\u00e7\u00e3o imports : [], // Imports de depend\u00eancias providers : [], bootstrap : []}) // Qual \u00e9 o componente respons\u00e1vel por fazer o bootstrap da aplica\u00e7\u00e3o Nota @NgModule -> Decorator. Utilizado para aplicar metadados em uma classe/atributo/metodo/argumento de um metodo`","title":"Arquivos da Estrutura"},{"location":"angular/files/#geral-dos-arquivos-angular-cli","text":"","title":"Geral dos Arquivos Angular CLI"},{"location":"angular/files/#packagesjson","text":"Nota Arquivo de configura\u00e7\u00e3o da aplica\u00e7\u00e3o. Cont\u00e9m todas as depend\u00eancias","title":"Packages.json"},{"location":"angular/files/#webpack","text":"Nota Biblioteca em java script respons\u00e1vel por criar os bundles da aplica\u00e7\u00e3o. polyfills - S\u00e9rie de scripts que voc\u00ea adiciona para aumentar compatibilidade com browsers antigos; main - Scripts da aplica\u00e7\u00e3o; styles - Stilos dentro da aplica\u00e7\u00e3o; vendor - Scripts de terceiros; inline - carregar webpack.","title":"WebPack"},{"location":"angular/files/#srcpolyfillsts","text":"Nota Incluir scripts para dar suporte a novas funcionalidades a browsers antigos","title":"src\\polyfills.ts"},{"location":"angular/files/#appmodulets","text":"@NgModule ({ declarations : [ MyFirstComponent ], //Todos os componentes da aplica\u00e7\u00e3o imports : [], // Imports de depend\u00eancias providers : [], bootstrap : []}) // Qual \u00e9 o componente respons\u00e1vel por fazer o bootstrap da aplica\u00e7\u00e3o Nota @NgModule -> Decorator. Utilizado para aplicar metadados em uma classe/atributo/metodo/argumento de um metodo`","title":"app.module.ts"},{"location":"angular/forms/","text":"Formul\u00e1rios Dica Ao criar um <form> n\u00e3o esquecer de desabilitar a valida\u00e7\u00e3o de formul\u00e1rios do browser. <form novalidade ></form> Pois assim, todos os usu\u00e1rios ter\u00e3o a mesma experi\u00eancia, mesmo com browsers diferentes. Colocando novalidate delegamos essa valida\u00e7\u00e3o para o angular, deixando o procedimento de valida\u00e7\u00e3o uniforme. Valida\u00e7\u00f5es Diretiva NGMODEL disponibiliza os seguintes status que podem ser verificados para dar feedback ao usu\u00e1rio: Valid|Invalid - Se o valor do campo est\u00e1 de acordo com as regras de valida\u00e7\u00e3o; Pristine|Dirty - Pristine \u00e9 o estado inicial do campo/form. Uma vez que o usu\u00e1rio altera o valor do campo, ele se torna dirty e n\u00e3o volta mais; Untouched|Touched - A diferen\u00e7a entre Pristine|Dirty e Untouched|Touched \u00e9 que para o alterar o status de pristine , \u00e9 necess\u00e1rio alterar o valor, j\u00e1 untouched somente entrar no campo. Para saber o estado que o campo se encontra, precisamos obter uma refer\u00eancia para a diretiva NGMODEL do campo. Exemplo < form > < input name = \"name\" [ ngModel ]=\" username \" # ipt = \"ngModel\" required minlength = \"5\" > < span * ngIf = \"ipt.invalid\" > Nome Inv\u00e1lido </ span > </ form > As valida\u00e7\u00f5es que podemos usar em um campo s\u00e3o: Required - Caso um campo seja obrigat\u00f3rio; Pattern - Regex - Recebe um padr\u00e3o de express\u00e3o regular Min e max length - Determinar tamanho m\u00e1ximo ou m\u00ednimo do campo.","title":"Forms"},{"location":"angular/forms/#formularios","text":"Dica Ao criar um <form> n\u00e3o esquecer de desabilitar a valida\u00e7\u00e3o de formul\u00e1rios do browser. <form novalidade ></form> Pois assim, todos os usu\u00e1rios ter\u00e3o a mesma experi\u00eancia, mesmo com browsers diferentes. Colocando novalidate delegamos essa valida\u00e7\u00e3o para o angular, deixando o procedimento de valida\u00e7\u00e3o uniforme.","title":"Formul\u00e1rios"},{"location":"angular/forms/#validacoes","text":"Diretiva NGMODEL disponibiliza os seguintes status que podem ser verificados para dar feedback ao usu\u00e1rio: Valid|Invalid - Se o valor do campo est\u00e1 de acordo com as regras de valida\u00e7\u00e3o; Pristine|Dirty - Pristine \u00e9 o estado inicial do campo/form. Uma vez que o usu\u00e1rio altera o valor do campo, ele se torna dirty e n\u00e3o volta mais; Untouched|Touched - A diferen\u00e7a entre Pristine|Dirty e Untouched|Touched \u00e9 que para o alterar o status de pristine , \u00e9 necess\u00e1rio alterar o valor, j\u00e1 untouched somente entrar no campo. Para saber o estado que o campo se encontra, precisamos obter uma refer\u00eancia para a diretiva NGMODEL do campo. Exemplo < form > < input name = \"name\" [ ngModel ]=\" username \" # ipt = \"ngModel\" required minlength = \"5\" > < span * ngIf = \"ipt.invalid\" > Nome Inv\u00e1lido </ span > </ form > As valida\u00e7\u00f5es que podemos usar em um campo s\u00e3o: Required - Caso um campo seja obrigat\u00f3rio; Pattern - Regex - Recebe um padr\u00e3o de express\u00e3o regular Min e max length - Determinar tamanho m\u00e1ximo ou m\u00ednimo do campo.","title":"Valida\u00e7\u00f5es"},{"location":"angular/install/","text":"Instala\u00e7\u00e3o Angular Cli e depend\u00eancias Aten\u00e7\u00e3o! NO LINUX, SEMPRE UTILIZAR O SUDO OU ENT\u00c3O CORRIGIR AS PERMISS\u00d5ES DO NPM NodeJS Para Instalar o Node no Linux: sudo apt - get update sudo apt - get install nodejs npm Ou ent\u00e3o baixar pelo pr\u00f3prio site do NODE. Para Testar a vers\u00e3o do node: node -v Angular Cli Para Instala\u00e7\u00e3o no Linux: sudo npm install - g @angular / cli O -g indica que o pacote ser\u00e1 instalada de forma Global . Para poder ser usado em todos os pontos do SO , n\u00e3o s\u00f3 em uma pasta O @angular/cli \u00e9 o nome do pacote Para testar se foi instalado a vers\u00e3o corretamente: ng -v Dever\u00e1 imprimir \"ANGULAR CLI\" no Terminal com a lista das vers\u00f5es logo a baixo. Importante Sempre que baixar um novo projeto do git, utilizar npm install para baixar as depend\u00eancias.","title":"Instala\u00e7\u00e3o"},{"location":"angular/install/#instalacao-angular-cli-e-dependencias","text":"Aten\u00e7\u00e3o! NO LINUX, SEMPRE UTILIZAR O SUDO OU ENT\u00c3O CORRIGIR AS PERMISS\u00d5ES DO NPM","title":"Instala\u00e7\u00e3o Angular Cli e depend\u00eancias"},{"location":"angular/install/#nodejs","text":"Para Instalar o Node no Linux: sudo apt - get update sudo apt - get install nodejs npm Ou ent\u00e3o baixar pelo pr\u00f3prio site do NODE. Para Testar a vers\u00e3o do node: node -v","title":"NodeJS"},{"location":"angular/install/#angular-cli","text":"Para Instala\u00e7\u00e3o no Linux: sudo npm install - g @angular / cli O -g indica que o pacote ser\u00e1 instalada de forma Global . Para poder ser usado em todos os pontos do SO , n\u00e3o s\u00f3 em uma pasta O @angular/cli \u00e9 o nome do pacote Para testar se foi instalado a vers\u00e3o corretamente: ng -v Dever\u00e1 imprimir \"ANGULAR CLI\" no Terminal com a lista das vers\u00f5es logo a baixo. Importante Sempre que baixar um novo projeto do git, utilizar npm install para baixar as depend\u00eancias.","title":"Angular Cli"},{"location":"angular/newapp/","text":"Gerando uma nova aplica\u00e7\u00e3o (Angular CLI) Para gerar uma nova aplica\u00e7\u00e3o no angular cli: ng new nome - aplicacao -- prefix = exemplo Aten\u00e7\u00e3o --prefix= \u00e9 o prefixo dos componentes que ser\u00e3o gerados na aplica\u00e7\u00e3o","title":"Nova Aplica\u00e7\u00e3o com Angular CLI"},{"location":"angular/newapp/#gerando-uma-nova-aplicacao-angular-cli","text":"Para gerar uma nova aplica\u00e7\u00e3o no angular cli: ng new nome - aplicacao -- prefix = exemplo Aten\u00e7\u00e3o --prefix= \u00e9 o prefixo dos componentes que ser\u00e3o gerados na aplica\u00e7\u00e3o","title":"Gerando uma nova aplica\u00e7\u00e3o (Angular CLI)"},{"location":"angular/reactiveprogramming/","text":"Programa\u00e7\u00e3o Reativa (Reactive Programming) Como funciona? Um evento acontece e os que est\u00e3o interessados s\u00e3o notificados e reagem a ele. Baseado em um padr\u00e3o bem comum chamado OBSERVER . Nesse padr\u00e3o, voc\u00ea terar o Observer que \u00e9 o foco do interesse e voc\u00ea ter\u00e1 outros objetos que s\u00e3o os interessados em alguma mudan\u00e7a desse primeiro objeto que s\u00e3o os listeners . Os listeners se inscrevem esperando uma mudan\u00e7a (evento). Quando o evento acontece, o listener , executa uma a\u00e7\u00e3o. Dica \u00c9 portanto a combina\u00e7\u00e3o de dois padr\u00f5es. ITERATOR - Porque vai de item a item; OBSERVER - Porque notifica os listeners interessados.","title":"Programa\u00e7\u00e3o Reativa"},{"location":"angular/reactiveprogramming/#programacao-reativa-reactive-programming","text":"Como funciona? Um evento acontece e os que est\u00e3o interessados s\u00e3o notificados e reagem a ele. Baseado em um padr\u00e3o bem comum chamado OBSERVER . Nesse padr\u00e3o, voc\u00ea terar o Observer que \u00e9 o foco do interesse e voc\u00ea ter\u00e1 outros objetos que s\u00e3o os interessados em alguma mudan\u00e7a desse primeiro objeto que s\u00e3o os listeners . Os listeners se inscrevem esperando uma mudan\u00e7a (evento). Quando o evento acontece, o listener , executa uma a\u00e7\u00e3o. Dica \u00c9 portanto a combina\u00e7\u00e3o de dois padr\u00f5es. ITERATOR - Porque vai de item a item; OBSERVER - Porque notifica os listeners interessados.","title":"Programa\u00e7\u00e3o Reativa (Reactive Programming)"},{"location":"angular/routes/","text":"Rotas Nota Os exemplos utilizados s\u00e3o baseados no meat-app que se encontra no github/cod3rcursos. S\u00e3o anota\u00e7\u00f5es do decorrer do curso. Para marcar como area din\u00e2mica no template, utilizar <router-outlet></router-outlet> . Dessa forma, a aplica\u00e7\u00e3o mudar\u00e1 o componente conforme as rotas. Para que isso funcione, devemos mapear cada componente nas rotas. As rotas s\u00e3o basicamente um array que possuem o caminho para cada componente. Rotas aceitam par\u00e2metros, utilizando a sintax :nomeparam Exemplo: export const ROUTES : Route = [ { path : '' , component : RestaurantsComponent }, { path : 'restaurant/:id' , component : RestaurantsComponent }, { path : 'about' , component : AboutComponent } ] Em seguida, voc\u00ea precisa indicar que rotas ser\u00e3o usadas no m\u00f3dulo atrav\u00e9s da fun\u00e7\u00e3o forRoot no m\u00f3dulo ra\u00edz: @NgModule ({ declaration : [...], imports : [..., RouterModule . forRoot ( ROUTES )], }) export class AppModule { ... } Ou forChild nos outros modulos... ======= Implementar anota\u00e7\u00f5es forChild Como que eu consigo navegar? Como os caminhos s\u00e3o acionados? O Modulo de routeamento disponibiliza uma diretiva chamada routerLink= onde podemos passar um caminho a ser acionado ou, um conjunto de par\u00e2metros. <!-- no template de algum componente --> < a routerLink = \"/restaurants\" > Restaurantes </ a > <!-- ou --> < a [ routerLink ]=\"['/ restaurants ']\" > Restaurantes </ a > <!-- passando par\u00e2metro --> < a [ routerLink ]=\"['/ restaurants ', restaurant . id ]\" > Restaurantes </ a > routerLinkActive Como Controlar o estilo dos links ativos ou n\u00e3o ativos? O modulo de routeamento disponibiliza uma diretiva routerLinkActive=\"\" . Essa diretiva serve para mudar o estilo caso a rota abaixo do elemento esteja ativa. N\u00e3o \u00e9 obrigat\u00f3rio o uso no elemento que estiver com o routerLink. Voc\u00ea pode utilizar em elementos parents. <!-- active \u00e9 a classe do css --> < li routerLinkActive = \"active\" >< a href = \"#\" > Restaurantes </ a ></ li >","title":"Rotas"},{"location":"angular/routes/#rotas","text":"Nota Os exemplos utilizados s\u00e3o baseados no meat-app que se encontra no github/cod3rcursos. S\u00e3o anota\u00e7\u00f5es do decorrer do curso. Para marcar como area din\u00e2mica no template, utilizar <router-outlet></router-outlet> . Dessa forma, a aplica\u00e7\u00e3o mudar\u00e1 o componente conforme as rotas. Para que isso funcione, devemos mapear cada componente nas rotas. As rotas s\u00e3o basicamente um array que possuem o caminho para cada componente. Rotas aceitam par\u00e2metros, utilizando a sintax :nomeparam Exemplo: export const ROUTES : Route = [ { path : '' , component : RestaurantsComponent }, { path : 'restaurant/:id' , component : RestaurantsComponent }, { path : 'about' , component : AboutComponent } ] Em seguida, voc\u00ea precisa indicar que rotas ser\u00e3o usadas no m\u00f3dulo atrav\u00e9s da fun\u00e7\u00e3o forRoot no m\u00f3dulo ra\u00edz: @NgModule ({ declaration : [...], imports : [..., RouterModule . forRoot ( ROUTES )], }) export class AppModule { ... } Ou forChild nos outros modulos... ======= Implementar anota\u00e7\u00f5es forChild Como que eu consigo navegar? Como os caminhos s\u00e3o acionados? O Modulo de routeamento disponibiliza uma diretiva chamada routerLink= onde podemos passar um caminho a ser acionado ou, um conjunto de par\u00e2metros. <!-- no template de algum componente --> < a routerLink = \"/restaurants\" > Restaurantes </ a > <!-- ou --> < a [ routerLink ]=\"['/ restaurants ']\" > Restaurantes </ a > <!-- passando par\u00e2metro --> < a [ routerLink ]=\"['/ restaurants ', restaurant . id ]\" > Restaurantes </ a >","title":"Rotas"},{"location":"angular/routes/#routerlinkactive","text":"Como Controlar o estilo dos links ativos ou n\u00e3o ativos? O modulo de routeamento disponibiliza uma diretiva routerLinkActive=\"\" . Essa diretiva serve para mudar o estilo caso a rota abaixo do elemento esteja ativa. N\u00e3o \u00e9 obrigat\u00f3rio o uso no elemento que estiver com o routerLink. Voc\u00ea pode utilizar em elementos parents. <!-- active \u00e9 a classe do css --> < li routerLinkActive = \"active\" >< a href = \"#\" > Restaurantes </ a ></ li >","title":"routerLinkActive"},{"location":"angular/securitynavigationoperator/","text":"Operador de Navega\u00e7\u00e3o Segura Dica A interroga\u00e7\u00e3o (?), nas express\u00f5es angular, serve para dizer ao Angular que se caso a express\u00e3o retorne undefined, n\u00e3o tente ler o atributo. Exemplo: <div> Student: {{ student ? .name }} <div * ngIf= \"student?.isJedi\" > jedi Temple: {{ student ? .temple }} </div> </div>","title":"Operador de Navega\u00e7\u00e3o Segura"},{"location":"angular/securitynavigationoperator/#operador-de-navegacao-segura","text":"Dica A interroga\u00e7\u00e3o (?), nas express\u00f5es angular, serve para dizer ao Angular que se caso a express\u00e3o retorne undefined, n\u00e3o tente ler o atributo. Exemplo: <div> Student: {{ student ? .name }} <div * ngIf= \"student?.isJedi\" > jedi Temple: {{ student ? .temple }} </div> </div>","title":"Operador de Navega\u00e7\u00e3o Segura"},{"location":"angular/services/","text":"Servi\u00e7os O que \u00e9 um servi\u00e7o? S\u00e3o classes comuns em angular que voc\u00ea pode usar para injetar em componentes ou em outros servi\u00e7os. Geralmente usados para encapsular o acesso a API de Backend. Podem ser Singletons . \u00d3timos para guardar dados compartilhados por toda a aplica\u00e7\u00e3o ou por parte dela. Importante!!! S\u00e3o 3 os escopos que voc\u00ea pode usar para declararum servi\u00e7o: M\u00f3dulo - Todo servi\u00e7o declarado na lista de providers do m\u00f3dulo ra\u00edz fica disponivel para ser injetado por todas as classes declaradas nesse mesmo m\u00f3dulo. Isso inclui componentes e outros servi\u00e7os tamb\u00e9m. Todos compartilhar\u00e3o a mesma inst\u00e2ncia desse servi\u00e7o; Componente e seus filhos - Fica dispon\u00edvel apenas ao componente e seus filhos; Somente Componente - viewProviders[] - Apenas ao componente. Dica Servi\u00e7os tamb\u00e9m pode solicitar inje\u00e7\u00e3o de outros servi\u00e7os. Para isso, eles devem usar o decorator @injectable() . import { injectable } from '@angular/core' import { Http } from '@angular/core' @Injectable () export class MyService { constructor ( private http : Http ){ // Here } list (){ return this . http . get ( 'url' ) } } Aten\u00e7\u00e3o @Injectable() n\u00e3o \u00e9 necess\u00e1rio para que seu servi\u00e7o seja injetado em outro objeto! Somente para receber.","title":"Servi\u00e7os"},{"location":"angular/services/#servicos","text":"O que \u00e9 um servi\u00e7o? S\u00e3o classes comuns em angular que voc\u00ea pode usar para injetar em componentes ou em outros servi\u00e7os. Geralmente usados para encapsular o acesso a API de Backend. Podem ser Singletons . \u00d3timos para guardar dados compartilhados por toda a aplica\u00e7\u00e3o ou por parte dela. Importante!!! S\u00e3o 3 os escopos que voc\u00ea pode usar para declararum servi\u00e7o: M\u00f3dulo - Todo servi\u00e7o declarado na lista de providers do m\u00f3dulo ra\u00edz fica disponivel para ser injetado por todas as classes declaradas nesse mesmo m\u00f3dulo. Isso inclui componentes e outros servi\u00e7os tamb\u00e9m. Todos compartilhar\u00e3o a mesma inst\u00e2ncia desse servi\u00e7o; Componente e seus filhos - Fica dispon\u00edvel apenas ao componente e seus filhos; Somente Componente - viewProviders[] - Apenas ao componente. Dica Servi\u00e7os tamb\u00e9m pode solicitar inje\u00e7\u00e3o de outros servi\u00e7os. Para isso, eles devem usar o decorator @injectable() . import { injectable } from '@angular/core' import { Http } from '@angular/core' @Injectable () export class MyService { constructor ( private http : Http ){ // Here } list (){ return this . http . get ( 'url' ) } } Aten\u00e7\u00e3o @Injectable() n\u00e3o \u00e9 necess\u00e1rio para que seu servi\u00e7o seja injetado em outro objeto! Somente para receber.","title":"Servi\u00e7os"},{"location":"angular/startserver/","text":"Iniciando servidor Somente visivel na m\u00e1quina de desenvolvimento ng serve npm start Visivel externamente ng serve -- host 0.0 . 0.0 -- disable - host - check","title":"Iniciar Servidor"},{"location":"angular/startserver/#iniciando-servidor","text":"Somente visivel na m\u00e1quina de desenvolvimento ng serve npm start Visivel externamente ng serve -- host 0.0 . 0.0 -- disable - host - check","title":"Iniciando servidor"},{"location":"mkdocs/mkdocs/","text":"For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"MKDocs"},{"location":"mkdocs/mkdocs/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"mkdocs/mkdocs/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"mongodb/utils/","text":"Configura\u00e7\u00e3o e Comandos MongoDB Windows Importante!!! Na tela de vari\u00e1veis de ambiente, \"vari\u00e1ves do sistema\" encontre PATH e adicione o caminho da pasta \"BIN\" da instala\u00e7\u00e3o do mongodb. Comandos mongodb nota Lembrar que o mongo db \u00e9 case sensitive como a maioria dos DBs. Iniciar mongodb : mongod Inicar console : mongo Mudar de base : use nome_base Criar nova base : Para criar uma nova base, deve-se usar o \"use\" com o nome da nova base e na sequ\u00eancia criar uma \"collection\": db.createCollection('nomeCollection') . \u00c9 poss\u00edvel criar inserindo um dado diretamente: db.nomeCollection.insert({name: \"Janeiro/2020\", month: 1, year: 2020}) Mostrar dbs : show dbs Mostar se existe Collections Criadas : show collections Conforme mostrado acima, para inserir deve-se escrever db. seguido do nome da collection e tambem de .insert : db.nomeCollection.insert({ name: \"Janeiro/2020\", month: 1, year: 2020, atribArray: [{chave: valor}] }) Salvar um dado utilizando save : O Save, tanto salva como atualiza um dado! db.nomeCollection.save( {name: \"Fevereiro/2020\", month: 2, year: 2020, atribArray: [{chave: valor}]} ) Atualizar dados : db.nomeCollection.update( {$and: [{month: 1}, {year: 2020}]}, {$set:{month: 3}} ) Fazendo consultas Trazer todos os dados da cole\u00e7\u00e3o : db.nomeCollection.find().pretty() -- a fun\u00e7\u00e3o \"pretty()\" serve somente para formatar a saida do console. Trazer o primeiro registro : db.nomeCollection.findOne() Trazer registro especifico : db.nomeCollection.findOne({month: 2}) Trazer registros com condi\u00e7\u00f5es Usando OR : db.nomeCollection.find({$or: [{month: 1, month: 2}]}).pretty() Verificando se existe um atributo : db.nomeCollection.find({atribArray:{$exists:true}}).pretty() Pular registros : db.nomeCollection.find({year: 2020}).skip(1) Pula e Limita registros : db.nomeCollection.find({year: 2020}).skip(1).limit(1) Trazer somente uma determinada coluna : db.nomeCollection.find( {atribArray:{$exists:true}}, {_id:0, name:1} ).pretty() Agrega\u00e7\u00f5es O que \u00e9 $project e $group Doc. Mongodb - Project Projeta apenas os dados que interessam do documento Doc. Mongodb - Group $group : Crit\u00e9rios de agrupamento utilizado para consolidar os dados de todas as cole\u00e7\u00f5es em unico registro. Vamos imaginar que existe um atributo que chama \"credits\" onde contem o valor de cr\u00e9dito de determinada conta banc\u00e1ria. Se eu quero trazer a somat\u00f3ria deste atributo, deve ser feito como abaixo: db.nomeCollection.aggregate([{ $project:{ credit:{$sum:\"$credits.value\"} }, $group:{ _id:null, credit:{$sum:\"$credit\"} } }]) Drop Database Nota Lembrando que ser\u00e1 dropada a base que estiver em utiliza\u00e7\u00e3o no momento. Garanta utilizando use nome_database db.dropDatabase() Exclu\u00e7\u00e3o db.nomeCollection.remove( {month:2} ) Count db.nomeCollection.count()","title":"Mongodb"},{"location":"mongodb/utils/#configuracao-e-comandos-mongodb","text":"","title":"Configura\u00e7\u00e3o e Comandos MongoDB"},{"location":"mongodb/utils/#windows","text":"Importante!!! Na tela de vari\u00e1veis de ambiente, \"vari\u00e1ves do sistema\" encontre PATH e adicione o caminho da pasta \"BIN\" da instala\u00e7\u00e3o do mongodb.","title":"Windows"},{"location":"mongodb/utils/#comandos-mongodb","text":"nota Lembrar que o mongo db \u00e9 case sensitive como a maioria dos DBs. Iniciar mongodb : mongod Inicar console : mongo Mudar de base : use nome_base Criar nova base : Para criar uma nova base, deve-se usar o \"use\" com o nome da nova base e na sequ\u00eancia criar uma \"collection\": db.createCollection('nomeCollection') . \u00c9 poss\u00edvel criar inserindo um dado diretamente: db.nomeCollection.insert({name: \"Janeiro/2020\", month: 1, year: 2020}) Mostrar dbs : show dbs Mostar se existe Collections Criadas : show collections Conforme mostrado acima, para inserir deve-se escrever db. seguido do nome da collection e tambem de .insert : db.nomeCollection.insert({ name: \"Janeiro/2020\", month: 1, year: 2020, atribArray: [{chave: valor}] }) Salvar um dado utilizando save : O Save, tanto salva como atualiza um dado! db.nomeCollection.save( {name: \"Fevereiro/2020\", month: 2, year: 2020, atribArray: [{chave: valor}]} ) Atualizar dados : db.nomeCollection.update( {$and: [{month: 1}, {year: 2020}]}, {$set:{month: 3}} )","title":"Comandos mongodb"},{"location":"mongodb/utils/#fazendo-consultas","text":"Trazer todos os dados da cole\u00e7\u00e3o : db.nomeCollection.find().pretty() -- a fun\u00e7\u00e3o \"pretty()\" serve somente para formatar a saida do console. Trazer o primeiro registro : db.nomeCollection.findOne() Trazer registro especifico : db.nomeCollection.findOne({month: 2}) Trazer registros com condi\u00e7\u00f5es Usando OR : db.nomeCollection.find({$or: [{month: 1, month: 2}]}).pretty() Verificando se existe um atributo : db.nomeCollection.find({atribArray:{$exists:true}}).pretty() Pular registros : db.nomeCollection.find({year: 2020}).skip(1) Pula e Limita registros : db.nomeCollection.find({year: 2020}).skip(1).limit(1) Trazer somente uma determinada coluna : db.nomeCollection.find( {atribArray:{$exists:true}}, {_id:0, name:1} ).pretty()","title":"Fazendo consultas"},{"location":"mongodb/utils/#agregacoes","text":"O que \u00e9 $project e $group Doc. Mongodb - Project Projeta apenas os dados que interessam do documento Doc. Mongodb - Group $group : Crit\u00e9rios de agrupamento utilizado para consolidar os dados de todas as cole\u00e7\u00f5es em unico registro. Vamos imaginar que existe um atributo que chama \"credits\" onde contem o valor de cr\u00e9dito de determinada conta banc\u00e1ria. Se eu quero trazer a somat\u00f3ria deste atributo, deve ser feito como abaixo: db.nomeCollection.aggregate([{ $project:{ credit:{$sum:\"$credits.value\"} }, $group:{ _id:null, credit:{$sum:\"$credit\"} } }])","title":"Agrega\u00e7\u00f5es"},{"location":"mongodb/utils/#drop-database","text":"Nota Lembrando que ser\u00e1 dropada a base que estiver em utiliza\u00e7\u00e3o no momento. Garanta utilizando use nome_database db.dropDatabase()","title":"Drop Database"},{"location":"mongodb/utils/#exclucao","text":"db.nomeCollection.remove( {month:2} )","title":"Exclu\u00e7\u00e3o"},{"location":"mongodb/utils/#count","text":"db.nomeCollection.count()","title":"Count"},{"location":"node/node/","text":"NodeJS Nota O NodeJS \u00e9 baseado em m\u00f3dulos. Cada arquivo representa um m\u00f3dulo. Importa-se um m\u00f3dulo utilizando require('nomemodulo') Ser\u00e1 importado o que foi exportado por \"module.exports = nomefuncao\" no outro arquivo Singleton Nota Quando voc\u00ea importa determinado m\u00f3dulo \"require('')\", atribuindo a uma vari\u00e1vel, por padr\u00e3o o que \u00e9 retornado \u00e9 um singleton. Um singleton \u00e9 um objeto que tem uma unica instancia. \u00c9 compartilhado com quem pedir aquele mesmo m\u00f3dulo. Objeto Global (correspondente do window) Nota Evitar escopo global Ao declarar um Objeto em um m\u00f3dulo, ele n\u00e3o \u00e9 declarado como global. Declarando um objeto global: global . obj = { name : \"sou global!\" } Acessando objeto global console . log ( global . obj . name ) Lodash Nota Lodash n\u00e3o faz parte do core do node. Para utilizar, deve-se instalar o mesmo. npm i lodash Doc. Lodash npm init Nota npm init cria o package.json que fica guardado as configs da aplica\u00e7\u00e3o como m\u00f3dulos a serem baixados quando utilizado npm i Utilizar --save para que o node salve a dependencia em package.json, Ex.: npm i lodash --save . Utilizar --save-dev quando a dependencia for necess\u00e1ria somente para desenvolvimento. Passagem de par\u00e2metro M\u00f3dulo que recebe o par\u00e2metro module . exports = function ( param ) { console . log ( `O param informado foi ${ param } ` ) } M\u00f3dulo que utiliza a fun\u00e7\u00e3o const moduloComParam = require ( './arq' ) //O param informado foi este aqui moduloComParam ( 'este aqui' ) Process (ARGV) Nota process.argv retorna todos os par\u00e2metros utilizados na chamado do arquivo node. Exemplo de Utiliza\u00e7\u00e3o console . log ( process . argv ) function temParam ( param ) { return process . argv . indexOf ( param ) !== - 1 } if ( temParam ( '--producao' )) { console . log ( 'Aten\u00e7\u00e3o, aplica\u00e7\u00e3o em ambiente de produ\u00e7\u00e3o!' ) } else { console . log ( 'Aplica\u00e7\u00e3o em ambiente de desenvolvimento!' ) } STDIN /STDOUT Nota process.stdout.write() imprime algo no console process.stdin.on() recebe valor digitado pelo usu\u00e1rio EX: process . stdout . write ( 'Informe a porta que a API ficar\u00e1 escutando: ' ) process . stdin . on ( 'data' , function ( data ){ process . stdout . write ( `Aplica\u00e7\u00e3o iniciando na porta ${ data . toString () } ` ) }) M\u00f3dulo FS Nota Serve para ler/modificar arquivos, listar pasta, etc... Faz parte do core do Nodejs. const fs = require ( 'fs' ) //__dirname constante padr\u00e3o nodejs. \u00c9 a pasta atual do projeto const files = fs . readdirSync ( __dirname ) files . forEach ( f => console . log ( f )) M\u00f3dulo HTTP Ex: const http = require ( 'http' ) const server = http . createServer ( function ( req , res ){ res . writeHead ( 200 , { \"Content-Type\" : \"text/html\" }) res . end ( '<h1>Acho que \u00e9 melhor usar o Express, n\u00e3o?</h1>' ) }) const port = 3000 server . listen ( port , function (){ console . log ( `Escutando a porte: ${ port } ` ) })","title":"NodeJS"},{"location":"node/node/#nodejs","text":"Nota O NodeJS \u00e9 baseado em m\u00f3dulos. Cada arquivo representa um m\u00f3dulo. Importa-se um m\u00f3dulo utilizando require('nomemodulo') Ser\u00e1 importado o que foi exportado por \"module.exports = nomefuncao\" no outro arquivo","title":"NodeJS"},{"location":"node/node/#singleton","text":"Nota Quando voc\u00ea importa determinado m\u00f3dulo \"require('')\", atribuindo a uma vari\u00e1vel, por padr\u00e3o o que \u00e9 retornado \u00e9 um singleton. Um singleton \u00e9 um objeto que tem uma unica instancia. \u00c9 compartilhado com quem pedir aquele mesmo m\u00f3dulo.","title":"Singleton"},{"location":"node/node/#objeto-global-correspondente-do-window","text":"Nota Evitar escopo global Ao declarar um Objeto em um m\u00f3dulo, ele n\u00e3o \u00e9 declarado como global. Declarando um objeto global: global . obj = { name : \"sou global!\" } Acessando objeto global console . log ( global . obj . name )","title":"Objeto Global (correspondente do window)"},{"location":"node/node/#lodash","text":"Nota Lodash n\u00e3o faz parte do core do node. Para utilizar, deve-se instalar o mesmo. npm i lodash Doc. Lodash","title":"Lodash"},{"location":"node/node/#npm-init","text":"Nota npm init cria o package.json que fica guardado as configs da aplica\u00e7\u00e3o como m\u00f3dulos a serem baixados quando utilizado npm i Utilizar --save para que o node salve a dependencia em package.json, Ex.: npm i lodash --save . Utilizar --save-dev quando a dependencia for necess\u00e1ria somente para desenvolvimento.","title":"npm init"},{"location":"node/node/#passagem-de-parametro","text":"M\u00f3dulo que recebe o par\u00e2metro module . exports = function ( param ) { console . log ( `O param informado foi ${ param } ` ) } M\u00f3dulo que utiliza a fun\u00e7\u00e3o const moduloComParam = require ( './arq' ) //O param informado foi este aqui moduloComParam ( 'este aqui' )","title":"Passagem de par\u00e2metro"},{"location":"node/node/#process-argv","text":"Nota process.argv retorna todos os par\u00e2metros utilizados na chamado do arquivo node. Exemplo de Utiliza\u00e7\u00e3o console . log ( process . argv ) function temParam ( param ) { return process . argv . indexOf ( param ) !== - 1 } if ( temParam ( '--producao' )) { console . log ( 'Aten\u00e7\u00e3o, aplica\u00e7\u00e3o em ambiente de produ\u00e7\u00e3o!' ) } else { console . log ( 'Aplica\u00e7\u00e3o em ambiente de desenvolvimento!' ) }","title":"Process (ARGV)"},{"location":"node/node/#stdin-stdout","text":"Nota process.stdout.write() imprime algo no console process.stdin.on() recebe valor digitado pelo usu\u00e1rio EX: process . stdout . write ( 'Informe a porta que a API ficar\u00e1 escutando: ' ) process . stdin . on ( 'data' , function ( data ){ process . stdout . write ( `Aplica\u00e7\u00e3o iniciando na porta ${ data . toString () } ` ) })","title":"STDIN /STDOUT"},{"location":"node/node/#modulo-fs","text":"Nota Serve para ler/modificar arquivos, listar pasta, etc... Faz parte do core do Nodejs. const fs = require ( 'fs' ) //__dirname constante padr\u00e3o nodejs. \u00c9 a pasta atual do projeto const files = fs . readdirSync ( __dirname ) files . forEach ( f => console . log ( f ))","title":"M\u00f3dulo FS"},{"location":"node/node/#modulo-http","text":"Ex: const http = require ( 'http' ) const server = http . createServer ( function ( req , res ){ res . writeHead ( 200 , { \"Content-Type\" : \"text/html\" }) res . end ( '<h1>Acho que \u00e9 melhor usar o Express, n\u00e3o?</h1>' ) }) const port = 3000 server . listen ( port , function (){ console . log ( `Escutando a porte: ${ port } ` ) })","title":"M\u00f3dulo HTTP"},{"location":"pip/pip/","text":"Pip no linux Ao acontecer o problema: Command \"python setup.py egg_info\" failed with error code 1 in /tmp/pip-install-isorIG/tornado/ pip install -- upgrade setuptools","title":"PIP"},{"location":"pip/pip/#pip-no-linux","text":"Ao acontecer o problema: Command \"python setup.py egg_info\" failed with error code 1 in /tmp/pip-install-isorIG/tornado/ pip install -- upgrade setuptools","title":"Pip no linux"},{"location":"python/django/commandsDjango/","text":"Geral dos comandos do django Para iniciar um novo projeto: django - admin startproject myProject Criar um app: python manage . py startapp myApp Qual \u00e9 a diferen\u00e7a entre um projeto e um app? - Projetos versus aplica\u00e7\u00f5es - Encontrado na documenta\u00e7\u00e3o do django Um app \u00e9 uma aplica\u00e7\u00e3o que faz alguma coisa, exemplo, um sistema de web blog, um banco de dados de registros p\u00fablicos, ou uma simples aplica\u00e7\u00e3o de enquete. Um projeto \u00e9 uma cole\u00e7\u00e3o de configura\u00e7\u00f5es e apps para um particular website. Um projeto pode conter m\u00faltiplos apps. Um app pode estar em m\u00faltiplos projetos. Para saber mais... Django Project - Criando um aplicativo de vota\u00e7\u00e3o Iniciando servidor desenvolvimento: python manage . py runserver 0 : 8000 O uso do ip/porta \u00e9 opcional. Criando Banco de dados Acesse o link para toda a documenta\u00e7\u00e3o Django Project - Configura\u00e7\u00e3o do Banco de Dados Para verificar se houve mudan\u00e7a de models: python manage . py makemigrations Para criar as tabelas do banco: python manage . py migrate Nota O comando migrate verifica a configura\u00e7\u00e3o em INSTALLED_APPS e cria qualquer tabela do banco de dados necess\u00e1ria de acordo com as configura\u00e7\u00f5es do banco de dados no seu arquivo mysite/settings.py e as migra\u00e7\u00f5es que venham com a app (cobriremos isso mais tarde). \u00c9 mostrado uma mensagem para cada migra\u00e7\u00e3o que foi aplicada. Se lhe interessar, execute cliente de linha de comando para seu banco de dados e dgite \\dt (PostgreSQL), SHOW TABLES; (MySQL), .schema (SQLite), ou SELECT TABLE_NAME FROM USER_TABLES; (Oracle) para mostrar as tabelas mostradas pelo Django. Criar Super User python manage . py createsuperuser","title":"Comandos do Django"},{"location":"python/django/commandsDjango/#geral-dos-comandos-do-django","text":"","title":"Geral dos comandos do django"},{"location":"python/django/commandsDjango/#para-iniciar-um-novo-projeto","text":"django - admin startproject myProject","title":"Para iniciar um novo projeto:"},{"location":"python/django/commandsDjango/#criar-um-app","text":"python manage . py startapp myApp Qual \u00e9 a diferen\u00e7a entre um projeto e um app? - Projetos versus aplica\u00e7\u00f5es - Encontrado na documenta\u00e7\u00e3o do django Um app \u00e9 uma aplica\u00e7\u00e3o que faz alguma coisa, exemplo, um sistema de web blog, um banco de dados de registros p\u00fablicos, ou uma simples aplica\u00e7\u00e3o de enquete. Um projeto \u00e9 uma cole\u00e7\u00e3o de configura\u00e7\u00f5es e apps para um particular website. Um projeto pode conter m\u00faltiplos apps. Um app pode estar em m\u00faltiplos projetos. Para saber mais... Django Project - Criando um aplicativo de vota\u00e7\u00e3o","title":"Criar um app:"},{"location":"python/django/commandsDjango/#iniciando-servidor-desenvolvimento","text":"python manage . py runserver 0 : 8000 O uso do ip/porta \u00e9 opcional.","title":"Iniciando servidor desenvolvimento:"},{"location":"python/django/commandsDjango/#criando-banco-de-dados","text":"Acesse o link para toda a documenta\u00e7\u00e3o Django Project - Configura\u00e7\u00e3o do Banco de Dados Para verificar se houve mudan\u00e7a de models: python manage . py makemigrations Para criar as tabelas do banco: python manage . py migrate Nota O comando migrate verifica a configura\u00e7\u00e3o em INSTALLED_APPS e cria qualquer tabela do banco de dados necess\u00e1ria de acordo com as configura\u00e7\u00f5es do banco de dados no seu arquivo mysite/settings.py e as migra\u00e7\u00f5es que venham com a app (cobriremos isso mais tarde). \u00c9 mostrado uma mensagem para cada migra\u00e7\u00e3o que foi aplicada. Se lhe interessar, execute cliente de linha de comando para seu banco de dados e dgite \\dt (PostgreSQL), SHOW TABLES; (MySQL), .schema (SQLite), ou SELECT TABLE_NAME FROM USER_TABLES; (Oracle) para mostrar as tabelas mostradas pelo Django.","title":"Criando Banco de dados"},{"location":"python/django/commandsDjango/#criar-super-user","text":"python manage . py createsuperuser","title":"Criar Super User"},{"location":"python/django/install/","text":"Instala\u00e7\u00e3o do Django Depois que criar a virtualenv, devemos fazer a Instala\u00e7\u00e3o do Django. Para instalar, com a venv iniciada, digite o comando: pip install django","title":"Instala\u00e7\u00e3o"},{"location":"python/django/install/#instalacao-do-django","text":"Depois que criar a virtualenv, devemos fazer a Instala\u00e7\u00e3o do Django. Para instalar, com a venv iniciada, digite o comando: pip install django","title":"Instala\u00e7\u00e3o do Django"},{"location":"python/django/virtualenv/","text":"Virtual Env Para criar uma virtual env, v\u00e1 at\u00e9 a pasta desejada e digite e comando: python3 - m venv myvirtualenv Dica Se estiver utilizando o linux \u00e9 necess\u00e1rio instalar a virtual env. Para linux com base ubuntu: apt - get install python3 - venv Para ativar a virtualenv, dentro da pasta que cont\u00e9m a venv criada, digite: source myvirtualenv / bin / activate Para desativar a virtualenv use deactivate .","title":"Virtual Env"},{"location":"python/django/virtualenv/#virtual-env","text":"Para criar uma virtual env, v\u00e1 at\u00e9 a pasta desejada e digite e comando: python3 - m venv myvirtualenv Dica Se estiver utilizando o linux \u00e9 necess\u00e1rio instalar a virtual env. Para linux com base ubuntu: apt - get install python3 - venv Para ativar a virtualenv, dentro da pasta que cont\u00e9m a venv criada, digite: source myvirtualenv / bin / activate Para desativar a virtualenv use deactivate .","title":"Virtual Env"}]}