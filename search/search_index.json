{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Bem Vindo ao Meu Docs","title":"Home"},{"location":"#bem-vindo-ao-meu-docs","text":"","title":"Bem Vindo ao Meu Docs"},{"location":"sobre/","text":"Sobre Documenta\u00e7\u00e3o feita por Lucas Mazaron.","title":"Sobre"},{"location":"sobre/#sobre","text":"Documenta\u00e7\u00e3o feita por Lucas Mazaron.","title":"Sobre"},{"location":"utils/","text":"Utils Links Admin LTE Materials MKDocs Material docs","title":"Utils"},{"location":"utils/#utils","text":"Links Admin LTE Materials MKDocs Material docs","title":"Utils"},{"location":"angular/components/","text":"Componentes O que s\u00e3o? Pequenas partes dependentes reus\u00e1veis. Elementos personalizados, dispostos em estrutura de arvore , onde na ra\u00edz h\u00e1 sempre um component parent seguido dos seus filhos. S\u00e3o: Classes com um determinado ciclo de vida; Possuem: Template para determinar a apar\u00eancia; Selector (tag) para ser usado por outras partes da aplica\u00e7\u00e3o. Decorator @Component @Component ({ selector : prefix-namecomponent , templateUrl : ./myfirst.component.html // pode ser arquivo externo ou direto usando o comando template: de vez de templateUrl: }) Generate Component Para gerar novo component na aplica\u00e7\u00e3o: ng generate component name -- spec = false // ou ng g c name -- spec = false Aten\u00e7\u00e3o --spec= determina se ir\u00e1 gerar ou n\u00e3o arquivos de testes Property Binding Para que serve? Linkar valor de uma propriedade de um elemento a uma express\u00e3o angular. A atualiza\u00e7\u00e3o \u00e9 sempre em um sentido. ONE-WAY BINDING - COMPONENT = TEMPLATE Sintaxe: // No componente user = { name : Luke Skywalker } !-- no template do componente -- input type = text [ value ]= user . name DOM (Document Object Model) - O que s\u00e3o propriedades do DOM? Propriedades identicas aos atributos HTML. Por\u00e9m possui propriedades extras. //in component user = { name : Luke Skywalker , isJedi : true } !-- in template -- input type = text [ value ]= user . name div [ hidden ]= ! user . isJedi location of the jedi temple / dib Passando dados para os componentes Usando Decorator @Input As propriedades dos componentes s\u00e3o publicas por\u00e9m, parar passar dados, devemos indicar ao Angular qual deles podem receber dados dos component parent atrav\u00e9s de property binding . Primeira forma: import { Component , Input } from @angular/core @Component ({ selector : mt-header , template : h1 {{title}} /h1 }) // Por padr\u00e3o, nome do atributo exposto export class HeaderComponent { @input () title : string } //Expor com outro nome export class HeaderComponent { @input ( value ) title : string //@input( nome a ser exposto ) } !-- usando o header -- mt-header title = Minha APP / mt-header !-- utilizando com template Interpolation -- mt-header title = {{isJedi ? Jedi : Sith }} / mt-header !--Property Binding -- mt-header [ title ]= isJedi ? Jedi : Sith / mt-header !-- usando o nome definido em @Input -- mt-header value = Minha APP / mt-header Sempre que for passar um valor que n\u00e3o \u00e9 String, utilizar property binding Eventos de Um Componente Sem diretivas NG-* . Eventos possuem uma sintaxe unica, utilizando parenteses \"()\". Ex: Evento (click)=\"\" clickable.component.ts: import { Component } from @angular/core @Component ({ selector : mt-clickable , templateUrl : ./clickable.component.html }) export class ClickableComponent { clicked () : void { console . log ( Button clicked ) } } clickable.component.html: button ( click )= clicked () Click! / button Voc\u00ea pode tamb\u00e9m pode ter uma refer\u00eancia ao evento. clickable.component.ts: import { Component } from @angular/core @Component ({ selector : mt-clickable , templateUrl : ./clickable.component.html }) export class ClickableComponent { clicked () : void { console . log ( `Button clicked: ${ event } ` ) //Here } } clickable.component.html: button ( click )= clicked ($ event ) Click me! / button Evento (keydown.key)=\"\" O Evento keydown , permite voc\u00ea passar a tecla desejada. Ex: No template input ( keydown . space )= KeyDown ($ event ) No Componente KeyDown ( event ) : void { console . log ( `Key down: ${ $event } ` ) } Evento personalizado Para emitir um evento personalizado, utilizamos a classe EVENTEMITTER . clickable.component.ts: import { Component , Output , EventEmitter } from @angular/core //Here @Component ({ selector : mt-clickable , templateUrl : ./clickable.component.html }) export class ClickableComponent { // Output \u00e9 analogo a input... // Ao inv\u00e9s de receber valores ele emite eventos. @Output () myEvent = new EventEmitter () //Here clicked () : void { this . myEvent . emit () //Here } } No template que usa o componente: mt-clickable ( myEvent )= willBeCalled () / mt-clickable willBeCalled () : void { console . log ( Event from clickable ) }","title":"Componentes"},{"location":"angular/components/#componentes","text":"O que s\u00e3o? Pequenas partes dependentes reus\u00e1veis. Elementos personalizados, dispostos em estrutura de arvore , onde na ra\u00edz h\u00e1 sempre um component parent seguido dos seus filhos. S\u00e3o: Classes com um determinado ciclo de vida; Possuem: Template para determinar a apar\u00eancia; Selector (tag) para ser usado por outras partes da aplica\u00e7\u00e3o.","title":"Componentes"},{"location":"angular/components/#decorator-component","text":"@Component ({ selector : prefix-namecomponent , templateUrl : ./myfirst.component.html // pode ser arquivo externo ou direto usando o comando template: de vez de templateUrl: })","title":"Decorator @Component"},{"location":"angular/components/#generate-component","text":"Para gerar novo component na aplica\u00e7\u00e3o: ng generate component name -- spec = false // ou ng g c name -- spec = false Aten\u00e7\u00e3o --spec= determina se ir\u00e1 gerar ou n\u00e3o arquivos de testes","title":"Generate Component"},{"location":"angular/components/#property-binding","text":"Para que serve? Linkar valor de uma propriedade de um elemento a uma express\u00e3o angular. A atualiza\u00e7\u00e3o \u00e9 sempre em um sentido. ONE-WAY BINDING - COMPONENT = TEMPLATE Sintaxe: // No componente user = { name : Luke Skywalker } !-- no template do componente -- input type = text [ value ]= user . name","title":"Property Binding"},{"location":"angular/components/#dom-document-object-model-o-que-sao-propriedades-do-dom","text":"Propriedades identicas aos atributos HTML. Por\u00e9m possui propriedades extras. //in component user = { name : Luke Skywalker , isJedi : true } !-- in template -- input type = text [ value ]= user . name div [ hidden ]= ! user . isJedi location of the jedi temple / dib","title":"DOM (Document Object Model) - O que s\u00e3o propriedades do DOM?"},{"location":"angular/components/#passando-dados-para-os-componentes","text":"","title":"Passando dados para os componentes"},{"location":"angular/components/#usando-decorator-input","text":"As propriedades dos componentes s\u00e3o publicas por\u00e9m, parar passar dados, devemos indicar ao Angular qual deles podem receber dados dos component parent atrav\u00e9s de property binding . Primeira forma: import { Component , Input } from @angular/core @Component ({ selector : mt-header , template : h1 {{title}} /h1 }) // Por padr\u00e3o, nome do atributo exposto export class HeaderComponent { @input () title : string } //Expor com outro nome export class HeaderComponent { @input ( value ) title : string //@input( nome a ser exposto ) } !-- usando o header -- mt-header title = Minha APP / mt-header !-- utilizando com template Interpolation -- mt-header title = {{isJedi ? Jedi : Sith }} / mt-header !--Property Binding -- mt-header [ title ]= isJedi ? Jedi : Sith / mt-header !-- usando o nome definido em @Input -- mt-header value = Minha APP / mt-header Sempre que for passar um valor que n\u00e3o \u00e9 String, utilizar property binding","title":"Usando Decorator @Input"},{"location":"angular/components/#eventos-de-um-componente","text":"Sem diretivas NG-* . Eventos possuem uma sintaxe unica, utilizando parenteses \"()\". Ex:","title":"Eventos de Um Componente"},{"location":"angular/components/#evento-click","text":"clickable.component.ts: import { Component } from @angular/core @Component ({ selector : mt-clickable , templateUrl : ./clickable.component.html }) export class ClickableComponent { clicked () : void { console . log ( Button clicked ) } } clickable.component.html: button ( click )= clicked () Click! / button","title":"Evento (click)=\"\""},{"location":"angular/components/#voce-pode-tambem-pode-ter-uma-referencia-ao-evento","text":"clickable.component.ts: import { Component } from @angular/core @Component ({ selector : mt-clickable , templateUrl : ./clickable.component.html }) export class ClickableComponent { clicked () : void { console . log ( `Button clicked: ${ event } ` ) //Here } } clickable.component.html: button ( click )= clicked ($ event ) Click me! / button","title":"Voc\u00ea pode tamb\u00e9m pode ter uma refer\u00eancia ao evento."},{"location":"angular/components/#evento-keydownkey","text":"O Evento keydown , permite voc\u00ea passar a tecla desejada. Ex: No template input ( keydown . space )= KeyDown ($ event ) No Componente KeyDown ( event ) : void { console . log ( `Key down: ${ $event } ` ) }","title":"Evento (keydown.key)=\"\""},{"location":"angular/components/#evento-personalizado","text":"Para emitir um evento personalizado, utilizamos a classe EVENTEMITTER . clickable.component.ts: import { Component , Output , EventEmitter } from @angular/core //Here @Component ({ selector : mt-clickable , templateUrl : ./clickable.component.html }) export class ClickableComponent { // Output \u00e9 analogo a input... // Ao inv\u00e9s de receber valores ele emite eventos. @Output () myEvent = new EventEmitter () //Here clicked () : void { this . myEvent . emit () //Here } } No template que usa o componente: mt-clickable ( myEvent )= willBeCalled () / mt-clickable willBeCalled () : void { console . log ( Event from clickable ) }","title":"Evento personalizado"},{"location":"angular/depinjection/","text":"O que \u00e9 Inje\u00e7\u00e3o de Depend\u00eancia?","title":"Inje\u00e7\u00e3o de Depend\u00eancia"},{"location":"angular/depinjection/#o-que-e-injecao-de-dependencia","text":"","title":"O que \u00e9 Inje\u00e7\u00e3o de Depend\u00eancia?"},{"location":"angular/directives/","text":"Diretivas Para que servem? Serve para adicionar um comportamento a um elemento do DOM. N\u00e3o possui template. Existem tr\u00eas tipos de diretivas Componentes - Que s\u00e3o as mais comuns; Estruturais - Mudam o template/estrutura do DOM. Ex: ngFor - ngIf; Atributos - Associa um atributo a um elemento do DOM. Estruturais Como funcionam? Trabalham com padr\u00e3o de templates do HTML5. O * (asterisco) \u00e9 a forma abreviada da diretiva para que n\u00e3o precise digitar o elemento template. ngIf O Que faz? Renderiza ou n\u00e3o um conte\u00fado caso a condi\u00e7\u00e3o for verdadeira. input type = text [ value ]= user . name div * ngIf = user.isJedi location of the jedi template / div ngFor O Que faz? Repete o conte\u00fado de um elemento para cada item de uma cole\u00e7\u00e3o de objetos. ul li * ngFor = let user of users {{user.name}} / li / ul Dica Voc\u00ea pode declarar uma vari\u00e1vel para indice(Index come\u00e7a em 0): ul li * ngFor= let user of users; let i=index {{ i + 1 }} - {{ user.name }} /li /ul ngSwitch div [ ngSwitch ]= profile p * ngSwitchCase = root You can read write / p p * ngSwitchCase = user You can read / p p * ngSwitchDefault go back, please! / p / div","title":"Diretivas"},{"location":"angular/directives/#diretivas","text":"Para que servem? Serve para adicionar um comportamento a um elemento do DOM. N\u00e3o possui template. Existem tr\u00eas tipos de diretivas Componentes - Que s\u00e3o as mais comuns; Estruturais - Mudam o template/estrutura do DOM. Ex: ngFor - ngIf; Atributos - Associa um atributo a um elemento do DOM.","title":"Diretivas"},{"location":"angular/directives/#estruturais","text":"Como funcionam? Trabalham com padr\u00e3o de templates do HTML5. O * (asterisco) \u00e9 a forma abreviada da diretiva para que n\u00e3o precise digitar o elemento template.","title":"Estruturais"},{"location":"angular/directives/#ngif","text":"O Que faz? Renderiza ou n\u00e3o um conte\u00fado caso a condi\u00e7\u00e3o for verdadeira. input type = text [ value ]= user . name div * ngIf = user.isJedi location of the jedi template / div","title":"ngIf"},{"location":"angular/directives/#ngfor","text":"O Que faz? Repete o conte\u00fado de um elemento para cada item de uma cole\u00e7\u00e3o de objetos. ul li * ngFor = let user of users {{user.name}} / li / ul Dica Voc\u00ea pode declarar uma vari\u00e1vel para indice(Index come\u00e7a em 0): ul li * ngFor= let user of users; let i=index {{ i + 1 }} - {{ user.name }} /li /ul","title":"ngFor"},{"location":"angular/directives/#ngswitch","text":"div [ ngSwitch ]= profile p * ngSwitchCase = root You can read write / p p * ngSwitchCase = user You can read / p p * ngSwitchDefault go back, please! / p / div","title":"ngSwitch"},{"location":"angular/files/","text":"Geral dos Arquivos Angular CLI Packages.json Nota Arquivo de configura\u00e7\u00e3o da aplica\u00e7\u00e3o. Cont\u00e9m todas as depend\u00eancias WebPack Nota Biblioteca em java script respons\u00e1vel por criar os bundles da aplica\u00e7\u00e3o. polyfills - S\u00e9rie de scripts que voc\u00ea adiciona para aumentar compatibilidade com browsers antigos; main - Scripts da aplica\u00e7\u00e3o; styles - Stilos dentro da aplica\u00e7\u00e3o; vendor - Scripts de terceiros; inline - carregar webpack. src\\polyfills.ts Nota Incluir scripts para dar suporte a novas funcionalidades a browsers antigos app.module.ts @NgModule ({ declarations : [ MyFirstComponent ], //Todos os componentes da aplica\u00e7\u00e3o imports : [], // Imports de depend\u00eancias providers : [], bootstrap : []}) // Qual \u00e9 o componente respons\u00e1vel por fazer o bootstrap da aplica\u00e7\u00e3o Nota @NgModule - Decorator. Utilizado para aplicar metadados em uma classe/atributo/metodo/argumento de um metodo`","title":"Arquivos da Estrutura"},{"location":"angular/files/#geral-dos-arquivos-angular-cli","text":"","title":"Geral dos Arquivos Angular CLI"},{"location":"angular/files/#packagesjson","text":"Nota Arquivo de configura\u00e7\u00e3o da aplica\u00e7\u00e3o. Cont\u00e9m todas as depend\u00eancias","title":"Packages.json"},{"location":"angular/files/#webpack","text":"Nota Biblioteca em java script respons\u00e1vel por criar os bundles da aplica\u00e7\u00e3o. polyfills - S\u00e9rie de scripts que voc\u00ea adiciona para aumentar compatibilidade com browsers antigos; main - Scripts da aplica\u00e7\u00e3o; styles - Stilos dentro da aplica\u00e7\u00e3o; vendor - Scripts de terceiros; inline - carregar webpack.","title":"WebPack"},{"location":"angular/files/#srcpolyfillsts","text":"Nota Incluir scripts para dar suporte a novas funcionalidades a browsers antigos","title":"src\\polyfills.ts"},{"location":"angular/files/#appmodulets","text":"@NgModule ({ declarations : [ MyFirstComponent ], //Todos os componentes da aplica\u00e7\u00e3o imports : [], // Imports de depend\u00eancias providers : [], bootstrap : []}) // Qual \u00e9 o componente respons\u00e1vel por fazer o bootstrap da aplica\u00e7\u00e3o Nota @NgModule - Decorator. Utilizado para aplicar metadados em uma classe/atributo/metodo/argumento de um metodo`","title":"app.module.ts"},{"location":"angular/install/","text":"Instala\u00e7\u00e3o Angular Cli e depend\u00eancias Aten\u00e7\u00e3o! NO LINUX, SEMPRE UTILIZAR O SUDO OU ENT\u00c3O CORRIGIR AS PERMISS\u00d5ES DO NPM NodeJS Para Instalar o Node no Linux: sudo apt - get update sudo apt - get install nodejs npm Ou ent\u00e3o baixar pelo pr\u00f3prio site do NODE. Para Testar a vers\u00e3o do node: node -v Angular Cli Para Instala\u00e7\u00e3o no Linux: sudo npm install - g @angular / cli O -g indica que o pacote ser\u00e1 instalada de forma Global . Para poder ser usado em todos os pontos do SO , n\u00e3o s\u00f3 em uma pasta O @angular/cli \u00e9 o nome do pacote Para testar se foi instalado a vers\u00e3o corretamente: ng -v Dever\u00e1 imprimir \"ANGULAR CLI\" no Terminal com a lista das vers\u00f5es logo a baixo. Importante Sempre que baixar um novo projeto do git, utilizar npm install para baixar as depend\u00eancias.","title":"Instala\u00e7\u00e3o"},{"location":"angular/install/#instalacao-angular-cli-e-dependencias","text":"Aten\u00e7\u00e3o! NO LINUX, SEMPRE UTILIZAR O SUDO OU ENT\u00c3O CORRIGIR AS PERMISS\u00d5ES DO NPM","title":"Instala\u00e7\u00e3o Angular Cli e depend\u00eancias"},{"location":"angular/install/#nodejs","text":"Para Instalar o Node no Linux: sudo apt - get update sudo apt - get install nodejs npm Ou ent\u00e3o baixar pelo pr\u00f3prio site do NODE. Para Testar a vers\u00e3o do node: node -v","title":"NodeJS"},{"location":"angular/install/#angular-cli","text":"Para Instala\u00e7\u00e3o no Linux: sudo npm install - g @angular / cli O -g indica que o pacote ser\u00e1 instalada de forma Global . Para poder ser usado em todos os pontos do SO , n\u00e3o s\u00f3 em uma pasta O @angular/cli \u00e9 o nome do pacote Para testar se foi instalado a vers\u00e3o corretamente: ng -v Dever\u00e1 imprimir \"ANGULAR CLI\" no Terminal com a lista das vers\u00f5es logo a baixo. Importante Sempre que baixar um novo projeto do git, utilizar npm install para baixar as depend\u00eancias.","title":"Angular Cli"},{"location":"angular/newapp/","text":"Gerando uma nova aplica\u00e7\u00e3o (Angular CLI) Para gerar uma nova aplica\u00e7\u00e3o no angular cli: ng new nome - aplicacao -- prefix = exemplo Aten\u00e7\u00e3o --prefix= \u00e9 o prefixo dos componentes que ser\u00e3o gerados na aplica\u00e7\u00e3o","title":"Nova Aplica\u00e7\u00e3o com Angular CLI"},{"location":"angular/newapp/#gerando-uma-nova-aplicacao-angular-cli","text":"Para gerar uma nova aplica\u00e7\u00e3o no angular cli: ng new nome - aplicacao -- prefix = exemplo Aten\u00e7\u00e3o --prefix= \u00e9 o prefixo dos componentes que ser\u00e3o gerados na aplica\u00e7\u00e3o","title":"Gerando uma nova aplica\u00e7\u00e3o (Angular CLI)"},{"location":"angular/routes/","text":"Rotas Nota Os exemplos utilizados s\u00e3o baseados no meat-app que se encontra no github/cod3rcursos. S\u00e3o anota\u00e7\u00f5es do decorrer do curso. Para marcar como area din\u00e2mica no template, utilizar router-outlet /router-outlet . Dessa forma, a aplica\u00e7\u00e3o mudar\u00e1 o componente conforme as rotas. Para que isso funcione, devemos mapear cada componente nas rotas. As rotas s\u00e3o basicamente um array que possuem o caminho para cada componente. Rotas aceitam par\u00e2metros, utilizando a sintax :nomeparam Exemplo: export const ROUTES : Route = [ { path : , component : RestaurantsComponent }, { path : restaurant/:id , component : RestaurantsComponent }, { path : about , component : AboutComponent } ] Em seguida, voc\u00ea precisa indicar que rotas ser\u00e3o usadas no m\u00f3dulo atrav\u00e9s da fun\u00e7\u00e3o forRoot no m\u00f3dulo ra\u00edz: @NgModule ({ declaration : [...], imports : [..., RouterModule . forRoot ( ROUTES )], }) export class AppModule { ... } Ou forChild nos outros modulos... ======= Implementar anota\u00e7\u00f5es forChild Como que eu consigo navegar? Como os caminhos s\u00e3o acionados? O Modulo de routeamento disponibiliza uma diretiva chamada routerLink= onde podemos passar um caminho a ser acionado ou, um conjunto de par\u00e2metros. !-- no template de algum componente -- a routerLink = /restaurants Restaurantes / a !-- ou -- a [ routerLink ]= [ / restaurants ] Restaurantes / a routerLinkActive Como Controlar o estilo dos links ativos ou n\u00e3o ativos? O modulo de routeamento disponibiliza uma diretiva routerLinkActive=\"\" . Essa diretiva serve para mudar o estilo caso a rota abaixo do elemento esteja ativa. N\u00e3o \u00e9 obrigat\u00f3rio o uso no elemento que estiver com o routerLink. Voc\u00ea pode utilizar em elementos parents. !-- active \u00e9 a classe do css -- li routerLinkActive = active a href = # Restaurantes / a / li","title":"Rotas"},{"location":"angular/routes/#rotas","text":"Nota Os exemplos utilizados s\u00e3o baseados no meat-app que se encontra no github/cod3rcursos. S\u00e3o anota\u00e7\u00f5es do decorrer do curso. Para marcar como area din\u00e2mica no template, utilizar router-outlet /router-outlet . Dessa forma, a aplica\u00e7\u00e3o mudar\u00e1 o componente conforme as rotas. Para que isso funcione, devemos mapear cada componente nas rotas. As rotas s\u00e3o basicamente um array que possuem o caminho para cada componente. Rotas aceitam par\u00e2metros, utilizando a sintax :nomeparam Exemplo: export const ROUTES : Route = [ { path : , component : RestaurantsComponent }, { path : restaurant/:id , component : RestaurantsComponent }, { path : about , component : AboutComponent } ] Em seguida, voc\u00ea precisa indicar que rotas ser\u00e3o usadas no m\u00f3dulo atrav\u00e9s da fun\u00e7\u00e3o forRoot no m\u00f3dulo ra\u00edz: @NgModule ({ declaration : [...], imports : [..., RouterModule . forRoot ( ROUTES )], }) export class AppModule { ... } Ou forChild nos outros modulos... ======= Implementar anota\u00e7\u00f5es forChild Como que eu consigo navegar? Como os caminhos s\u00e3o acionados? O Modulo de routeamento disponibiliza uma diretiva chamada routerLink= onde podemos passar um caminho a ser acionado ou, um conjunto de par\u00e2metros. !-- no template de algum componente -- a routerLink = /restaurants Restaurantes / a !-- ou -- a [ routerLink ]= [ / restaurants ] Restaurantes / a","title":"Rotas"},{"location":"angular/routes/#routerlinkactive","text":"Como Controlar o estilo dos links ativos ou n\u00e3o ativos? O modulo de routeamento disponibiliza uma diretiva routerLinkActive=\"\" . Essa diretiva serve para mudar o estilo caso a rota abaixo do elemento esteja ativa. N\u00e3o \u00e9 obrigat\u00f3rio o uso no elemento que estiver com o routerLink. Voc\u00ea pode utilizar em elementos parents. !-- active \u00e9 a classe do css -- li routerLinkActive = active a href = # Restaurantes / a / li","title":"routerLinkActive"},{"location":"angular/securitynavigationoperator/","text":"Operador de Navega\u00e7\u00e3o Segura Dica A interroga\u00e7\u00e3o (?), nas express\u00f5es angular, serve para dizer ao Angular que se caso a express\u00e3o retorne undefined, n\u00e3o tente ler o atributo. Exemplo: div Student: {{ student ? .name }} div * ngIf= student?.isJedi jedi Temple: {{ student ? .temple }} /div /div","title":"Operador de Navega\u00e7\u00e3o Segura"},{"location":"angular/securitynavigationoperator/#operador-de-navegacao-segura","text":"Dica A interroga\u00e7\u00e3o (?), nas express\u00f5es angular, serve para dizer ao Angular que se caso a express\u00e3o retorne undefined, n\u00e3o tente ler o atributo. Exemplo: div Student: {{ student ? .name }} div * ngIf= student?.isJedi jedi Temple: {{ student ? .temple }} /div /div","title":"Operador de Navega\u00e7\u00e3o Segura"},{"location":"angular/startserver/","text":"Iniciando servidor Somente visivel na m\u00e1quina de desenvolvimento ng serve npm start Visivel externamente ng serve -- host 0.0 . 0.0 -- disable - host - check","title":"Iniciar Servidor"},{"location":"angular/startserver/#iniciando-servidor","text":"Somente visivel na m\u00e1quina de desenvolvimento ng serve npm start Visivel externamente ng serve -- host 0.0 . 0.0 -- disable - host - check","title":"Iniciando servidor"},{"location":"mkdocs/mkdocs/","text":"For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"MKDocs"},{"location":"mkdocs/mkdocs/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"mkdocs/mkdocs/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"pip/pip/","text":"Pip no linux Ao acontecer o problema: Command \"python setup.py egg_info\" failed with error code 1 in /tmp/pip-install-isorIG/tornado/ pip install --upgrade setuptools","title":"PIP"},{"location":"pip/pip/#pip-no-linux","text":"Ao acontecer o problema: Command \"python setup.py egg_info\" failed with error code 1 in /tmp/pip-install-isorIG/tornado/ pip install --upgrade setuptools","title":"Pip no linux"}]}